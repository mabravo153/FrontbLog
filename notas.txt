APLICACION SPA CON ANGULAR 

spa es single page aplication, un sitio que no recarga su pagina si no que funciona con llamados asincronos. a lo largo 
del curso estaremos manejando esta informacion 

en este curso veremos 

instalacion de angular
creacion de modelos
creacion de componentes 
creacion de rutas 
registro de usuarios 
login de usuario
etc

INSTALAR ANGULAR 
debemos tener instalado nodejs 

Nota: Concebido como un entorno de ejecución de JavaScript orientado a eventos asíncronos, 
Node.js está diseñado para construir aplicaciones en red escalables. En la siguiente aplicación de ejemplo "hola mundo", se pueden manejar muchas conexiones concurrentes.
Por cada conexión el callback será ejecutado, sin embargo si no hay trabajo que hacer Node.js estará durmiendo.

lo descargamos para poder usar npm que es gestor de paquetes, lo mismo que se usa para instalar firebase 

luego de instalar node debemos actualizar npm, lo hacemos con el comando npm install -g npm@latest 

luego de actualizar debemos borrar la cache de nmp con el siguiente comando npm cache clean --force, esto lo hacemos con el fin de evitar 
que no se actualice algun paquete que deseemos, luego debemos desactivar las auditorias para evitar fallos 

eso lo hacemos con el siguiente comando npm set audit false 

luego debemos desintalar el cli de angular con los siguientes comandos npm uninstall -g angular-cli y 
npm uninstall -g @angular/cli  pues en este caso no esta nada porque no tenemos angular 


Nota: para limpiar la pantalla en la consola de windows es usando cls

luego de seguir todos los pasos ahora si podemos instalar angular, con el siguiente comando npm install -g @angular/cli de esta manera instalamos el 
cli que nos dara una serie de comandos con los cuales crearemos los proyectos y haremos ciertas cosas. 

para crear un proyecto como tal debemos ejecutar ng new, aparte de crear un proyecto de angular desde 0 nos brindara una serie de directorios
al ejecutar este comado nos pedira un nombre de proyecto, algo similar a cuando usamos composer con laravel 

luego de eso nos pregunta si usaremos el sistema de rutas de angular por defecto, le damos que no. ya que podemos configurarlo por nuestra cuenta,
nos pregunta si vamos a usar preprosesadores, en este caso no. y ahi empieza a instalar una serie de ficheros 

seguido a estar instalado, trabajaremos en la carpeta src seguido app 

Nota: angular por defecto trae sus propio servidor local. se activa con el comando ng serve, pero debemos estar en la carpeta del proyecto
al ejecutar el comando, se activa la auto complilacion y un live server como el que tenemos incluido aqui en vscode. luego de ejecutar el comando 
este nos arrojara una url. al acceder a ella. accederemos a una pagina principal que nos brinda angular

Nota: angular usa typescript el cual es un lenguaje de programacion el cual es un subconjunto y le agrega tipos estaticos y objetos basados en clases
para poder usar POO. pero debemos transpilarlo para que el navegador lo interprete, ya que ellos solo usan html css y js 


para usar angular debemos saber cierta terminologia como componentes 

COMPONENTES 

Los componentes definen áreas de responsabilidad en la interfaz de usuario (UI) que le permiten reutilizar conjuntos de funcionalidades de UI. 
Ya ha creado uno con el componente de lista de productos.

Un componente consta de tres cosas:

Una clase de componente que maneja datos y funcionalidad. En la sección anterior, los datos del producto y el método share () en la clase de componente manejan los datos y la funcionalidad respectivamente.

Una plantilla HTML que determina la interfaz de usuario. En la sección anterior, la plantilla HTML de la lista de productos muestra el nombre, la descripción y un botón "Compartir" para cada producto.

Estilos específicos de componentes que definen la apariencia. Aunque la lista de productos no define ningún estilo, aquí es donde reside el componente CSS.


* ngFor hace que <div> se repita para cada producto de la lista.
ngFor es una "directiva estructural". Las directivas estructurales dan forma o remodelan la estructura del DOM, típicamente agregando, eliminando y manipulando los elementos a los que están unidos. 
Cualquier directiva con un * es una directiva estructural.


INSTALAR DEPENDENCIA Y LIBRERIAS 

jquery, boostrap, angular woala (editor de texto), angularfileuploader 

esto lo hacemos abriendo e fichero package.json en la seccion de dependencias. las agregamos como un objeto json normal 
"bootstrap": "4.3.1", en el caso de bootstrap. luego de agregarlas abrimos la consola 

cortamos la ejecucion del serve y actualizamos con npm update. actualiza e instala la que no estan 

"angular-froala-wysiwyg": "2.9.1", /*editor de codigo para el blog*/
    "angular-file-uploader": "4.1.4" /*plugin de subida de achivos*/ 

luego de eso debemos añadir los paquetes al archivo angular.json, aqui agregamos los estilos y todo 

"assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": [
              "node_modules/froala-editor/js/froala_editor.min.js"
            ]
          },
como puedes notar ahi se agrega. todos los paquetes se guardan en node_modules. entonces para agregarlo debemos hacerlo de la siguiente manera 

por defecto ya viene cargado un style.css. lo que debemos hacer para agregar un archivo de un modelulo que hayamos descargado. es buscar en modulos. el elemento 
y le pomenos la ruta relativa 

"node_modules/froala-editor/css/froala_style.min.css" de esta manera quedaria. 

si usamos angular-file-uploader.  no sera necesario cargarlo en angular.json 
bueno luego de agregar estos plugins ya se puede iniciar el server y este empezara a compilarlo 

instalamos jquery en el proyecto ya que algunos plugins como el editor de texto usan ese plugin 


MODELOS 
angular trabaja igualmente con el modelo-vista-controlador asi que debemos crear unos modelos, uno por cada tabla en la bd, sobre el cual crearemos objetos de este tipo 

creamos la carpeta en la carpeta app que asi mismo esta en src. manejaremos el modelo mvc pero en vez de controladores usaremos componentes 

creamos los modelos de manera similar a un archivo normal, solo que la extension debe ser .ts de typescript
Nota: los nombre son en minuscula, debemos crerar una carpeta modelos

los modelos seran clases sobre los cuales crearemos objetos de este tipo (user, etc)

usamos export para poder usar las variables y funcionalidades fuera del modulo actual 
la informacion la podemos conseguir en el siguiente link
http://javascript.info/modules-intro

en este caso creamos una clase para poder exportarla. un modulo *


como es de costrumbre creamos un construactor, pero los atributos los declararemos de namera diferente 

no lo hacems como en js normal que creamos el constructor 

constructor(params) {
  this.params = params
}

si no en este caso declararemos los parametros directamente 
constructor(
        public id: number,
        public name: string
){} de esta manera, creamos los campos basados en la base de datos, lo mismo para cada uno de los modelos. 

recuerda que typesript es mas fuertemente tipado que js por lo cual es indispensable declarar el tipo de datos. los tipos de datos que maneja 
typescript son muy similares a los de lenguajes de programacion como c#, eso lo podemos ver 

https://www.typescriptlang.org/docs/handbook/basic-types.html

usaremos boostrap para agilizar el desarrollo del sitio 

las imagenes las meteremos en una carpeta en la carpeta de assets, para meterla en el proyecto solo debemos especificar la ruta relativa de la misma

CABECERA Y MENU

basicamente creamos una barra de navegacion muy normal. no la realice con css puro ya que la parte movil da mucho trabajo 

pero podemos crear el documento con html y css normal 


COMPONENTES 
para crear los componentes debemos usar la consola, crearemos uno para el login y uno para el registro, crearemos una carpeta para los componentes

angular usa una lista de comandos y en su web oficial explica para que se usa cada una de ellas 

https://angular.io/cli, en este caso la g es para generar. entrando al link y ondendo podemos ver todos los parametros que estos reciben 

ng g component carpeta/nombreComponente

esto nos crea una serie de archivos entre los cuales esta el archivo html, la hoja de estilos, clase de ts 

el componente como tal es muy interesante, este importa un objeto global llamado Components y otro llamado oninit, del core de angular 

seguido a eso nos arroja el selector que debemos usar para mostrar el contenido de este componente, la hoja de estilos y la maquetacion de html 

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})

podemos crear un atributo y lo llamamos con el constructor para cuando se vaya a instanciar esta clase, se cree automaticamente 

para imprimir algo que creemos en el componente, usamos {{}} como en laravel, recuerda usar una etiqueta para mostrar 

para que un componente funcione debe estar registrado en app.module.ts pero al crearlo, se registra automaticamente. de esta manera lo podemos usar e manera global 

para llamarlo lo podemos hacer en app.component o cualquier otro componente que queramos usar, solo debemos mostrar la etiqueta. de esta manera nos mostrara la informacion 

estaremos creando el atributo de las paginas 


asi mismo haremos con la seccion de log y las demas 



CONFIGURAR LAS RUTAS DE ANGULAR 

haremos eso para que cada uno de los componentes que hemos creado sea una pagina independiente 

debemos crear un nuevo archivo en  la carpeta app. que por convension puede ser routing.ts y debemos cargar diferentes modulos 

import {ModuleWithProviders} from '@angular/core'; //permite cargar como servicio las cosas del router 
import {Routes, RouterModule} from '@angular/router'; //clases y librerias del router 

luego importamos los components que hemos creado, los nombres los encontraremos en el mismo componente 

import {RegisterComponent } from './components/register/register.component'; de esta manera

luego debemos instanciar el servicio Router, debemos crear una constante de tipo routes la cual sera un array, dentro del array ingresaremos las rutas
rutas que tendra la aplicacion, esta ira relacionanda con un componente. esto va incluido en un objeto json 

const appRoutes: Routes= [
    {path: 'home', component: HomeComponent},
    {path: 'login', component: LoginComponent},
    {path: 'register', component: RegisterComponent},
    {path: '', component: HomeComponent},//ruta por defecto al abrir el sitio 
    {path: '**', component: ErrorComponent} //esta ruta se usa cuando no haya ninguna valida, despliega un error
]

de esta manera. en el path aparacera la extenion que tendra en la url el componente myapp.com/login  

segun la documentacion de angular. es necesario poner la ruta ** o sea la ruta no valida. al final de todo 

luego de eso debemos exportar dos elementos, la rutas y la configuracion 
export const appRoutingProviders: any[] = []; //para cargar las rutas como servicios

.luego exportaremos el modulo de las rutas, o sea la configuracion que hicimos hace poco. en la documentacion de angular. esta llama una funcion 

pero en nuestro ejemplo crearemos una constante y la exportamos, de tipo ModuleWithProviders e instanciaremos RouterModule. ya como aparece en el ejemplo de arriba
RouterModule.forRoot(appRoutes). el parametro que recibe es la constante de tipo Routes que creamos con las rutas 

https://angular.io/guide/router toda la informacion de como hacerlo lo encontraremos en este link 

quedaria asi  export const Routing: ModuleWithProviders = RouterModule.forRoot(appRoutes);

ESTE PASO DEBEMOS HACERLO PARA CARGARLO EN APP MODULE

ahora debemos abrir app.module.ts para cargar la informacion. ya en este punto debemos importar las constantes generadas en el archivo de rutas 
luego cargamos los modulos, en la seccion imports 

imports: [
    BrowserModule,
    routingModule
  ],
  providers: [
    appRoutingProviders
  ],

  de esta manera. es recomedable que al modulo (donde estan plasmadas las rutas) tenga como extencion Module



pero esto por si solo no hara nada, debemos usar RouterOutlet

Salida del enrutador
RouterOutlet es una directiva de la biblioteca de enrutadores que se utiliza como un componente. 
Actúa como un marcador de posición que marca el lugar en la plantilla donde el enrutador debe mostrar los componentes para esa salida.

Dada la configuración anterior, cuando la URL del navegador para esta aplicación se convierte en /login
el enrutador hace coincidir esa URL con la ruta de ruta /login y muestra LoginComponent como un elemento hermano del RouterOutlet
que ha colocado en la plantilla del componente host.

esto es una etiqueta que nos ayudara a mostrar los componentes que hemos indicado dependiendo la ruta creada anteriormente
{path: 'login', component: LoginComponent}, en caso de estar myApp.com/login. esta nos mostrara el componente login 




ACTIVAR LOS LINKS 

segun la documentacion de angular debemos usar un atributo llamado routerLink, este toma el control sobre los elementos del mismo 
al atributo le pasamos el valor que asignamos en la creacion de las rutas. vscode te permite instalar unos shortcuts que te traeran la directiva 
mas rapido 

[routerLink]="['/login']" debe quedar asi en el caso del login 

esto debemos hacerlo con cada uno de los elementos que queramos enlazar.. de esta manera evitamos que cargue la pagina. lo cual nos convierte en una app spa 





CREAR FORMULARIO DE REGISTRO

para crear un formulario con angular debemos importar en el app.module. el modulo formsModule de angular/forms
adicional a eso debemos agregarlo en la seccion de imports 

debemos crear un formulario de html normal, en el componente que usaremos. aplicaremos las clases de css que deseemos. etc 
en este caso recuerda que estamos usando boostrap lo cual hace el desarrollo mas rapido 

luego de crear el formulario en html y agregarle los estilos css. pasamos al componente de este registro.
importamos el modelo que usaremos, en este caso el de usuario
7
import {users} from '../../models/users'; 

creamos un atributo de tipo usuario   public user: users;  
y en el constructor le agregamos parametros. en este punto instancimamos la clase, debemos pasarle los parametros que este nos pide 
this.user = new users(1, '', '', '', '', '', 'USER', '')   lo rellenamos de esta manera, ya que el formulario se encargara de llenarlo  

vamos al componente de registro html y al formulario le agregamos una serie de variables.
esto lo hacemos agregando # antes del nombre de la variable en la vista #formularioRegistro="ngForm" (esta es la variable del formulario)

adicional a eso cuando se produzca el evento ngSubmit. llame a un metodo onSubmit, el cual crearemos en el register component.ts 
eso lo hacemos de esta manera  (ngSubmit)="onSubmit(formularioRegistro)" en este caso le pasamos el formulario para poder vaciarlo 

lo que dice la documentacion de angular respecto a ese metodo "El usuario debe poder enviar este formulario después de completarlo. 
El botón Enviar en la parte inferior del formulario no hace nada por sí solo, pero activará el envío de un formulario debido a su tipo 
(type = "submit").

Un "envío de formulario" es inútil en este momento. 
Para que sea útil, enlace la propiedad de evento ngSubmit del formulario al método onSubmit ()" esto es algo similar a si estuvieramos escuchando 
el evento submit con js puro 

seguido a eso debemos agregarle 

Agregue enlaces similares [((ngModel)] y atributos.

Agregó una interpolación de diagnóstico después de la etiqueta de entrada para que pueda ver lo que está haciendo.

[(ngModel)]="user.name" de esta manera, esto nos ayudara a cargar la informacion que recibamos del formulario en el objeto usuario, y de manera inversa

es indispensable que este escrito el nombre de la clase tal cual. ya que luego nos dara un error 

ADICIONAL ES INDISPENSABLE QUE CADA CAMPO TENGA UN NOMBRE Y UN ID. 

Eliminará el mensaje de enlace del cuadro de entrada y agregará un nuevo enlace (en la parte superior) a la propiedad de diagnóstico del componente. 
Luego puede confirmar que el enlace de datos bidireccional funciona para todo el modelo de héroe.

esto hara que cuando modifiquemos el dato en el formulario, nos modifique tambien en el objeto

aparte debemos crear la interpolacion para que cuando se cambie el elemento en el formulario cambie el objeto, debemos crear una variable en la vista de angular 
esta vez en el elemento, con el fin de validar el elemento 

los nombres a verificar, son los nombres de las variables. en este caso la variable tiene como nombre #name

<div [hidden]="name.valid || name.pristine"
     class="alert alert-danger">
  Name is required
</div> 

En este ejemplo, oculta el mensaje cuando el control es válido o impecable; "prístino" significa que el usuario no ha cambiado el valor desde que se mostró en este formulario.

Esta experiencia de usuario es la elección del desarrollador. Algunos desarrolladores quieren que el mensaje se muestre en todo momento. Si ignora el estado original, ocultará el mensaje solo cuando el valor sea válido. Si llega a este componente con un nuevo héroe (en blanco) o un héroe no válido, verá el mensaje de error inmediatamente, antes de hacer nada.

Algunos desarrolladores desean que el mensaje se muestre solo cuando el usuario realiza un cambio no válido. Ocultar el mensaje mientras el control es "impecable" logra ese objetivo. Verá la importancia de esta opción cuando agregue un nuevo héroe al formulario.

angular no maneja un validador como laravel, en este caso debes crear tu validador. por lo cual debes usar la etiqueta pattern en html5 que recibe expreciones regulares
pero no de una manera similar como js con sus clases 

bueno ya luego de realizar las verificaciones,vamos a realizar una validacion adicional. no se habilita el boton de enviar a menos que esten llenos los campos 


[disabled]="formularioRegistro.invalid" de esta manera hacemos que si el formularo es invalido, desabilite el boton, por eso es necesario crearle una variable al mismo 

antes de poner eso debemos poner que el campo es requerido y agregarle cualquier validacion que hagamos con pattern 

Nota: para validar espacios en html. debemos agregarle un espacio [a-zA-Z ] esto nos valida letras mayusculas minusculas y espacio

para resetear el formulario existe la funcionalidad reset. en el ejemplo que estamos haciendo. al dar click en submit, este creara una funcion la cual le pasaremos 
como parametro, la variable del formulario que contiene todos los datos del objeto creado. esta funcion estara en el component.ts de register que es la clase que estamos manejando, al declararla 

(ngSubmit)="onSubmit(formularioRegistro)

onSubmit(form){
    console.log(this.user);
    form.reset()
  }

  de esta manera. podremos imprimir el objeto ademas de recetear el formulario 

  en el siguiente link encontraremos la documentacion para hacer un formulario 
  https://angular.io/guide/forms#introduction-to-template-driven-forms





CREAR UN SERVICIO DE USUARIO 

crear un metodo para hacer una peticion ajax al backend 

debemos cargar un modulo en app.modules llamado HttpClientModule de @angular/common/http

luego este debemos cargarlo en imports. es muy importante que se cargue debajo del modulo del navegador

ahora crearemos un servicio. una clase que tendra todos los metodos con las peticiones ajax hacia la api del backend, estaremos creando una por cada modelo que tengamos, 
los tendremos en una carpeta

importaremos unos modulos. 

injectable de from @angular/core
el modulo httpClient de @angularjjk /common/http
aparte importamos  httpheaders para manejar las cabeceras tambien de  @angular/common/http
tambien debemos importar un modulo llamado observable, segun la documentacion de angular es necesario si se usa httpclient 
RxJS es una biblioteca para componer código asíncrono y de devolución de llamada en un estilo funcional y reactivo. Muchas API angulares, incluido HttpClient, producen y consumen RxJS Observables.
por ultimo importamos el modelo de usuario 

seguido debemos llamar el decorador inyectable para que se pueda usar como servicio , @inyectable seguido a eso creamos una clase y la exportamos 
creamos el contrsuctor y le pasamos como parametrodd la propiedad publica http client

@Injectable()
export class configServiceUser{
    constructor(public http: HttpClient ){
}

luego debemos importar el servicio en el componente que estamos usando con los usuarios en este caso. 

import { configServiceUser } from '../../services/user.service';

RECUERDA QUE EN IMPORT VA EL NOMBRE DE LA CLASE 

el siguiente paso que debemos realizar el inyectar la dependencia en el componente
añadimos una propiedad de providers debajo de las url, abrimos llaves y ponemos el nombre de nuestro modulo. el que importamos 

styleUrls: ['./login.component.css'],
providers: [configServiceUser]

ya realizado esto, debemos cargar en los parametros del constructor de este componeten(register)
el user service (private serviceUser: configServiceUser) de esta manera 



REGISTRAR USUARIO 
como recomendacion creamos un archivo para guardar configuraciones generales. como la url del api. 
en este caso lo cree en la misma carpeta service, creare un objeto el cual contendra la url de la api y lo exportare. la añadimos al services
y creamos una propiedad publica para tomar la url , esta la agregaremos en el constructor. nos permitira acceder a la url desde donde queramos 

ahora seguiremos la documentacion de angular. segun esta para hacer un Post request, debemos crear una funcion y debemos pasarle un objeto como parametro 
en este caso usuario 

adicional a eso, recuerda que estamos haciendo el backend separado. por lo cual debemos convertir el usuario en json antes de enviarlo. si no nos dara error 
adicional a eso, debemos enviarle con la llave 'json', para eso creamos una variable y le agregamos el string 'json' adicional a que le concatenamos el objeto antes visto 

luego configuramos los header, para eso segun la documentacion de angular, debemos instanaciar la clase HttpHeaders, esto lo hacemos en user.service
esta recibe unos parametros como en un objeto json 
https://angular.io/guide/http#http-headers

let headers = new HttpHeaders({'content-type': 'application/x-www-form-urlencoded'}) esta es la manera de instanciar la cabecera
parece que no nos permite modificar el header de esta manera por lo cual debemos agregarle un aparametro adicional que es set 

ahora si podemos hacer el return de la funcion, la cual le pasaremos el objeto httpClient, 
recuerda que a la url debemos agregarle la ruta de los metodos para poder acceder a la api, luego pasamos el contenido, qu en este caso es el json
las cabeceras de igual forma las pasaremos por unas cabeceras 

addUser(user: user): Observable<any>{
        //recibimos los datos de usuario y los convertirmos en json 
        let userJson = JSON.stringify(user); 
        
        //agregamos la llave que nos pedira la api, en este caso es 'json'. seguido concatenamos el json ya creado 
        let params = `json=${userJson}`;
       
        //instanciamos la clase httpheaders 
        let headers = new HttpHeaders().set('content-type', 'aplication/x-www-form-urlencoded');

        return this.http.post(`${this.url}register`, params, {headers: headers})

}

es indispensable que ya que usamos una llave en el json, que en este caso es json, debemos agregarle el = antes del objeto json. si no 
nos dara un error  let params = `json=${userJson}`; aqui 

de esta manera quedaria, es indispensable no usar header en la cabecera ya que esta no te dejara continuar.

bueno esta funcion hara una peticion ajax y nos retornara un observable donde tendremos los datos o el error que nos enviara la api 

ahora lo que tenemos que hacer es llamar la funcion anterior en el metodo onsubmit de nuestro component
luego de llamarla debemos pasarle una funcion adicional, esta vez es la funcion suscribe que retorna dos funciones callback 
response y error 

https://angular.io/guide/http#error-handling en el siguiente link encontraremos un poco de informacion sobre este metodo 

onSubmit(form){
    this.serviceUser.addUser(this.user).subscribe(//con este metodo tomamos la informacion que nos envia el api de vuelta 
      response => console.log(response),
      error => console.log(error)
    
    )
    form.reset();
  }
quedaria de esta manera 

ya en este punto podemos usar la api, en el momento me encuentro con un error. me retorna que los campos no son validos
asi que verificare que sucede 

EL ERROR ESTABA AL MOMENTO DE ENVIAR LOS PARAMETROS, DEBEMOS AGREGARLE UN = DESPUES DE LA LLAVE, AL ENVIAR LOS PARAMETROS QUEDARAN NULL


ahora tomaremos dentro de la funcion response,  una propiedad la cual recibira el codigo que nos enviara la api, para tomar la respuesta usamos el objeto response 

if(response.estado == 'correcto'){
          this.estado = response.estado
          form.reset();
        }else{
          this.estado = 400
        }

de esta manera, luego podemos ir a la vista y hacer una directiva condicional. eso lo hacemos con ngIf

creamos una propiedad publica, la cual estaremos usando para validar usando ngIf()

https://angular.io/api/common/NgIf#description  en esta parte de la documentacion podremos ver como funciona esta directiva 

en el componente html. crearemos unos div que seran nuestra alerta 
Nota: al usar ngIf, si una condicion se cumple esta se ejecuta. por ejemplo, estado es diferente a a error, lo cual  *ngIf="estado != 'error'"
esta ejecutara el codigo, en este caso mostrar un div 


FORMULARIO DE LOGIN 

imagino que haremos algo similar a el registro, crearemos en el component html el formulario de html. y le agregaremos los estilos css 

para agilizar el desarrollo usaremos los formularios de login de boostrap. 

luego de eso debemos ir al component.ts crear el objeto de usuario, crear la funcion onSubmit. es importante que esta este en la etiqueta formulario. en caso contrario 
nos dara un error, adicional a eso debemos crear la variable cuyo nombre debe ser el mismo que usemos al momento de mstrar u ocultar el mensaje de error 

aqui tenemos un ejemplo de la variable.  #userNameLogin="ngModel"   

y aqui tenemos un ejemplo de la validacion 
<div [hidden]="userNameLogin.valid || userNameLogin.pristine" class="alert alert-danger">

antes de realizar este paso debemos tener en cuenta que tenemos que tener validaciones en el html como el atributo required o pattern

luego debemos importar el servicio en el componente que estamos usando con los usuarios en este caso. 

import { configServiceUser } from '../../services/user.service';

RECUERDA QUE EN IMPORT VA EL NOMBRE DE LA CLASE 

el siguiente paso que debemos realizar el inyectar la dependencia en el componente
añadimos una propiedad de providers debajo de las url, abrimos llaves y ponemos el nombre de nuestro modulo. el que importamos 

styleUrls: ['./login.component.css'],
providers: [configServiceUser]

ya realizado esto, debemos cargar en los parametros del constructor de este componeten(login)
el user service (private serviceUser: configServiceUser) de esta manera 

luego de eso creamos el metodo en el serviceUser, recuerda que la api que desarrollamos tiene la capacidad de retornar el usuario identidicado o el token que se 
crea al loguearlo. el usuario identificado se pasa cuando la funcion envia un parametro adicional. recuerda eso  

debemos crear una funcion muy similar a esta 
login(user: user, getToken = null): Observable<any>{

        //el api nos retorna el usuario decodificado en caso de ser true 
        if(getToken != null){
            user.getToken = 'true'; 
        }


        //este objeto lo convertimos en un json y le agreamos la llave correspondiente 
        let json = JSON.stringify(user); 

        let params = `json=${json}`;

        //instanciamos el objeto httpHeader que contendra las cabeceras 
        let cabeceras = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded'); 

        //retornamos toda la informacion 
        return this.http.post(`${this.url}/login`, params, {headers: cabeceras});

}
como podemos notar, debemos agregar un campo adicional a usuario que es getToken, bueno en caso ya de haber terminado la creacion del metodo, 
llamamos la funcion login en el component.ts 

DEBES TENER EN CUENTA, QUE NO DEBES AGREGARLE UNA BARRA INCLINADA A LA URL YA QUE ESTA YA LA TRAE LA CUAL COPIAMOS DESDE LA URL EN EL ARCHIVO GLOBAL 

luego de eso debemos ejeutarlo en la funcion onSubmit de nuestra clase(component) 
esta funcion recibe dos clases de funcion callback. la primera es response y la otra es error 
response almacena toda la respuesta que nos traiga la api sea un error de validacion o la respuesta que esperamos 
error trae los posibles errores de sintaxis que este tenga. en el desarrollo es bueno capturarlo. 

debemos crear dos propiedades, una para el usuario identificado y otra para el token  que nos envia. 

lo que haremos en response, sera verificar que la respuesta no sea un error (enviado por la api)
en caso que no. cambiamos la propiedad estado a correcto y guardamos el token
en este punto la funcion no se le agrego el segundo parametro getToken, por lo cual esta nos retorna solo el token 
luego de capturar el token. lo que haremos sera ejecutar nuevamente la funcion esta vez pasandole el parametro getToken como true, esto con el fin 
de que nos traiga el usuario identificado 

 this.serviceUser.login(this.user).subscribe(

      response => {
        
        if(response.respuesta != 'error'){
          this.estado = 'correcto'; 
          this.token = response

          this.serviceUser.login(this.user, true).subscribe(

            response => {
            
                this.userIdenty = response
            
              console.log(this.token);
              console.log(this.userIdenty);
              
            }, 
            error => {
             this.estado = `error`;        
            }
      
          )

        }else{
          this.estado = `Usuario no identificado `
        }
        
      }, 
      error => {
       this.estado = `error ${error}`;        
      }
la funcion completa quedaria asi, (con unas pequeñas modificaciones)



PERSISTIR LOS DATOS DE LOGIN DE USUARIO 
para hacer eso podemos usar el local storage, es una especia de sesion o memoria que tiene el navegador web 
lo podemos guardar en string o number 

lo hacemos usando el objeto localstorage, esto es un elemento que usa js. el mismo es un elemento que almacena informacion en un par clave valor
hace persistir la informacion apesar de haber reiniciado el navegador 

para agregar un item al localstorage es muy facil. podemos usar el metodo setItem y para retornarlo. l metodo getItem

en el siguiete link encontraremos mas informacion http://javascript.info/localstorage

como dice la documentacion de la misma, este solo guarda string. por lo que debemos convertir a json el objeto de js 

localStorage.setItem('userIdentify', JSON.stringify(this.userIdenty)); de esta manera 


METODOS PARA SACAR TOKEN Y USUARIO IDENTIFICADO EN CUALQUIER COMPONENTE 

en el services de usuario, crearemos el metodo getToken y getUserIdentify 

la forma de hacerlo es muy sencillo podemos usar un metodo del objeto localStorage, getItem(). en este caso como estamos retomando en el objeto en json 
debemos convertirlo a un objeto de js comun y corriente. por lo cual usamos JSON.parse() para convertirlo en json 

luego verificamos si existe y no es undefined, en caso que no. asignamoos el objeto decodificado del json a la propiedad publica que hemos creado anteriormente en la clase 

hacemos lo mismo localstorage del token y lo retornamos. 

getToken(){
    let tokenUser = localStorage.getItem('token');

  (tokenUser && tokenUser != undefined)? this.token = tokenUser : this.token = null; 
      return this.token

}


ahora. como estamos usando la barra de navegacion del blog en el app.component, ahi debemos importar el services, añadir el provider
y agregar la propiedad privada en los parametros del constructor, luego de eso accedemos al metodo que vayamos a usar, getUserIdentify.
creamos una propiedad la cual tendra el usuario identificado y el token en caso de necesitarlo. ya al tener el objeto en una propiedad 
del cmponent.ts lo podemos usar en el component.html, ya lo unico que tenemos qe hacer aqui es acceder a la propiedad del objeto y listo 

para agrearle mas interactividad a la pagina, usaremos la directiva ngIf para mostrar el menu solo cuando el usuario este identificado. en caso que no 
se ocultara. lo mismo con el menu de login y creaccion de usuario 





CERRAR SESION 

primero crearemos una ruta en el archivo de rutas, crearemos una ruta logout la cual tendra adicional un parametro 

Nota: los parametros en las rutas los pasamos con :. por ejemplo, logout/:sure 
y mostraremos como componente el login, aqui tendremos un metodo que solo se ejecutara cuando se active esa ruta y lleve un parametro 

luego de crear la ruta, debemos ir al componente de login. importaremos tres clases. debemos importar
Router, ActivatedRoute, Params(sacar parametros de la url), luego lo cargamos en los parametros del constructor 
el contructor 

luego de hacer esto, ya podemos crear el cuerpo del metodo logout, para crear el cuerpo debemos llamar al objeto ActivatedRoute. 

Nota: Proporciona acceso a información sobre una ruta asociada con un componente que se carga en una salida. nos permite acceder a los parametros de la url 

este maneja un metodo lamado Params, Un observable de los parámetros de la matriz en el ámbito de esta ruta.

al ser un observable debemos usar el metodo suscribe. este nos devuelve una funcion de callback. esta funcion e callback recibe como nombre

params, seguido a eso debemos crear una variable dentro de la funcion y acceder al indice sure(el parametro de la ruta)

de esta manera capturamos el valor que nos pasa el parametro, le asignaremos un valor de 1 por lo cual validaremos que en caso de ser 1, destruimos el elemento que hemos guardado 
en el local storage adicional a eso, las propiedades creadas en esta clase. debemos volverlas null 

luego redirigiremos a la pagina de login, usando la clase Router 

Nota: Un servicio que proporciona capacidades de navegación y manipulación de URL.

esta clase tiene un metodo llamado navigate() este recibe un array pero solo le pasaremos la direccion del login 

recuerda que todos los metodos hay que llamarlos,estas clases manejan un metodo llamado ngonInit, el cual se ejecuta apenas se 
se carga, lo cual sera una buena mnera de ejecutar el codigo, pero solo se desloguea si se enva el parametro 

luego de hacer esto solo debemos agregarle el link a el enlace de logout en el menu desplegable del componente 

AHORA EN ESTE PUNTO, FUNCIONA PERO NOS A UN ERROR YA QUE EN UNA PARTE DEL CODIGO. VOLVEMOS LOS PARAMETROS USERIDENTITY Y TOKEN A NULL 
el error se da, por el echo de volver un valor nulo, la razon por la cual nos da el error es que en la validacion solicitamos el nombre del objeto, al no existir este nos da un error 
adicional a eso. no permite que el demas codigo se ejecute 


ha este punto, la barra no se actualizaautomaticamente. ya que no tenemos un metodo comprobndo el localstorage. por ejemplo. al logearte, este no 
verifica al usuario del mismo 

en el app.component.ts que es donde esta la logica de la barra. importaremos unos nuevos metodos, debemos añadir varias interfaces 

oninit, Docheck from agular/core, aparte debemos usar la palabra reservada implement para llamar las interfaces, luego de llamarlas debemos llamr a los metodos de la misma 

Nota: onInit se ejecuta apenas carga la pagina
Nota:  onCheck Un enlace de ciclo de vida que invoca una función de detección de cambios personalizada para una directiva, además de la verificación realizada por el detector de cambios predeterminado.

ngDoCheck(){ //con este se actualiza ese mismo metodo 
    this.loadUser() //con este metodo cargamos el token de usuario y contraseña que esten en el localstorage o no 
}

ahora luego de hacer esta logica, debemos redirigir apenas el usuario se haya registrado y se haya persistido los datos 





AJUSTE DE USUARIO. 
tendremos un formulario donde tendremos los datos del usuario identificado. y luego podemos subir un avatar(imagen de perfil). 

debemos crear el componente y la ruta. 
Nota: recuerda que se realiza usando ng g component 

al estar ya creado, debemos crear la ruta del mismo en el archivo routing que hemos creado anteriormente 

seguido a eso debemos crear el formulario para editar el usuario, debemos agregarle la variable al formulario #variable="ngForm"
adicionalmente a eso, no podemos olvidar agregarle el ng model a los inputs. como lo hemos visto en ocasiones anteriormente

debemos crear la variable que se ejecutara al ejecutar el evento submit (ngSubmit).

EN ESTE FORMULARIO, DEBEMOS TENER UN CAMPO FILE. YA QUE AQUI TENDREMOS QUE AGREGAR LA FOTO DE PERFIL 
lo haremos funcionar con un plugin que instalamos el cual es angular-file-uploaded

EN ESTE PUNTO, PARA QUE NOS APAREZCA LA INFORMACION DEL USUARIO CARGADA DEBEMOS INSTANCIAR EL USUARIO DENTRO DEL CONSTRUCTOR
Nota: cuando vayamos a usar el userIdentify y el token es mejor no asignarles un tipo. en mi caso le asigne un tipo string y me dio error 


seguido a eso debemos crear un metodo en el service que nos envie la informacion de actualizacion de los datos. lo hacemos mediante el metodo put 
pero antes de eso debemos recibir los datos que nos envia, este metodo debe recibir el parametro de user(el objeto que modificamos) y el token 

ya en el component debemos ejecutarlo dentro del metodo onsubmit. 

ahora bien. este metodo que hemos creado en el user services retorna un observable, el cual usa dos funciones. la primera es la respuesta 
y la segunda el error en caso de no haber conexion o algo asi, en caso de error debemos reemplazar la propiedad estado para mostrar la alerta 

si hay conexion, la api nos puede dar dos posibles respuestas, correcto y error. en ese caso debemos manejar las dos posibles respuesta 
sin olvidar cambiar el estado ya que eso es lo que vera el usuario con la ventana de notificacion que enviemos 
en caso de error hacemos lo mismo de ahora, cambiar la propiedad a error y mostrar el error 

en caso que no, cambiamos la propiedad a correcto y mostramos el mensaje de correcto, seguido a eso. debemos actualizar el objeto que tenemos en el 
localstorage, si no lo hacemos. este seguira persistiendo. por lo cual nos mostrara informacion obsoleta, para solucionar eso 
podemos podificar las propiedades del mismo, y luego sobre escribir el objeto en el local storage de esta manera 

 //modificar los campos del usuario identificado para actualizar el localstorage 
          this.userIdentify.name = this.user.name;
          this.userIdentify.lastName = this.user.lastName;
          this.userIdentify.userName = this.user.userName;
          this.userIdentify.email = this.user.email;
      
          localStorage.setItem('userIdentify', this.userIdentify);

el objeto user tendra en tiempo real por lo cual sera mas sencillo actualizar el local storage de esta manera

ese codigo nos dara un error en el local storage. RECUERDA QUE DEBEMOS CONVERTIR EL USERIDENTIFY EN UN OBJETO JSON 
si no lo hacemos de esta manera, nos dara un error y no nos mostrara nada. tendremos que borrar el localStorage del navegador 

ya luego de corregir este error, nos permitira cargar la informacion del local storage y asi actualizar en tiempo real el usuario 


EDITOR DE TEXTO ENRIQUESIDO 

lo usaremos mas que todo al momento de añadir un post, o en caso de tener una seccion para agregar alguna descripcion 

ya en este punto lo hemos instalado, en el package, y usamos el comando npm update para que lo instale
ahora debemos seguir la documentacion. en este link la encontraremos 

https://www.npmjs.com/package/angular-froala-wysiwyg

para instalarlo debemos abrir el module.ts e importarlo 

import { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';

seguido a eso debemos agregar los modulos que este necesita, ya en este punto hemos agregado el archivo los archivos js y css
es indispensable para froala que se añada el plugin de jquery.. luego de eso. podremos agregarlo a un textarea agregndo el atributo 

[froalaEditor], pero podemos modificarlo, en caso de tener opciones que no queramos. a este le damos el valor de options 

[froalaEditor]="options" luego lo editamos en el componente que maneje esa vista 

public options: Object = {
  placeholderText: 'Edit Your Content Here!',
  charCounterCount: false
}

y de esta manera podemos agregarle las opciones que nosotros deseemos, las opciones podemos enontrarlas en este link 
https://www.froala.com/wysiwyg-editor/docs/options


SUBIR EL AVATAR 
en este punto, estaremos subiendo un archivo. por lo cual usaremos una libreria. angular-file-uploader
 segun la documentacion de este modulo, debemos importar una clase 
 import { AngularFileUploaderModule } from "angular-file-uploader"; adicional a agregar el modulo al import 

 luego de hacer todo esto debemos agregar una etiqueta o directiva. que en la misma documetacion podemos encontrar. esta directiva reemplazara el input="file" 
 que hemos agregado 

 <angular-file-uploader
      [config]="afuConfig">
</angular-file-uploader>

como podemos ver este tiene una diretiva de configuracion, dentro tiene un nombre. esto es el nombre de una propiedad que estara en nuestro component.ts 
esta sera la configuracion inicial 

afuConfig = {
    uploadAPI: {
      url:"https://example-file-upload-api"
    }
};

como podemos ver. esta tiene una url, es la url de la api donde estaremos subiendo el archivo , pero tendremos mas posibilidades de subir imagenes 
o configuracion agregando los formatos posibles, el tema, etc 

https://www.npmjs.com/package/angular-file-uploader en este link podremos encontrar toda la informacion necesaria 

en el ejemplo usamos un ejemplo mas elavorado. el cual nos permite modificar el usuario, ya que cuando se realice la subida del archivo, esta nos lo mostrara

por lo cual debemos pasarle la directiva de esta  manera 

<angular-file-uploader
      [resetUpload]=resetVar
      (ApiResponse)="imageUpload($event)"
      [config]="afuConfig">
</angular-file-uploader>  la funcion que ejecutaremos sera imagenUpload. esta nos actualizara ese objeto 

a la funcion le pasaremos los datos que nos retorna la api (ApiResponse)="imageUpload($event)"
al momento de enviar la informacion hacia la api debemos verificar que la cabecera sea la correcta

ahora. para mostrar la imagen subida anteriormente debemos hacer una validacion y aparte debemos poner la url del api en una propiedad para que esta contenga la misma y asi 
poder usarla en la vista. 

la validacion que podemos hacer es, en caso de existir una imagen en el usuario que se esta modificando en el momento, entonces 
creamos una etiqueta imagen, a la url de la imagen le pasamos la url hacia la funcion que nos devuelve la imagen 

MOSTRAR IMAGEN EN LA BARRA DE NAVEGACION 

la idea es basicamente la misma que la de ahora, por lo que iremos al app component donde esta la barra. debemos crear un ngIf
el cual usaremos para validar si en el localstorage esta la imagen de usuario, en caso de estarla. mostraremos una etiqueta img 
y le damos estilos con css. 

realmente es sencillo, lo que tenemos que tener en cuenta es que en el component debemos importar el modulo de global(donde esta la url)
y debemos tener el userIdentify donde tenemos la info del local storage 




CREAR CATEGORIAS  
en este punto crearemos la seccion de categorias, por lo cual estaremos componentes  luego de agregarlo en app.module, adicional luego de crear la ruta en el modulo routing.
RECUERDA QUE CUANDO CREEMOS UN COMPONENT QUE TENGA QUE VER DIRECTAMENTE CON UN MODULO, DEBEMOS IMPORTAR ESTE 

adicional a eso debemos importar unos modulos adicionales, el service que creamos ( para sacar el token y el usuario identificado), 
los modulos de rutas (import { Router, ActivatedRoute, Params } from '@angular/router'), 

crear las propiedades privadas en el parametro del constructor las cuales son, instanciar el servicio, instanciar la clase Router 
instanciar el ActivatedRoute. aparte debemos crear unos parametros para el token, el usuario identificado y el modulo 
estos los rellenaremos dentro del cuerpo del constructor 

dejare mi proyecto hasta el momento aqui. asi que continuare luego  